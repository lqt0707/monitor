version: "3.8"

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: monitor-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-monitor}
      MYSQL_USER: ${MYSQL_USERNAME:-monitor}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-monitor123}
      TZ: ${TZ:-Asia/Shanghai}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./server/database/migrations:/docker-entrypoint-initdb.d
      - ./server/database/init:/docker-entrypoint-initdb.d
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:
      - monitor-network
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p${MYSQL_ROOT_PASSWORD:-root123}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # ClickHouse数据库
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: monitor-clickhouse
    restart: unless-stopped
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DATABASE:-monitor}
      CLICKHOUSE_USER: ${CLICKHOUSE_USERNAME:-monitor}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-monitor123}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      TZ: ${TZ:-Asia/Shanghai}
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./server/database/clickhouse-init:/docker-entrypoint-initdb.d
    networks:
      - monitor-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8123/ping",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Redis缓存和队列
  redis:
    image: redis:7-alpine
    container_name: monitor-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./server/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly yes
    networks:
      - monitor-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Commander (可选的Redis管理界面)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: monitor-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - monitor-network
    profiles:
      - tools

  # 监控系统Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: monitor-server
    restart: unless-stopped
    ports:
      - "${SERVER_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - TZ=${TZ:-Asia/Shanghai}
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=${MYSQL_DATABASE:-monitor}
      - MYSQL_USERNAME=${MYSQL_USERNAME:-monitor}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-monitor123}
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=9000
      - CLICKHOUSE_DATABASE=${CLICKHOUSE_DATABASE:-monitor}
      - CLICKHOUSE_USERNAME=${CLICKHOUSE_USERNAME:-monitor}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD:-monitor123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
      - DEEPSEEK_API_BASE_URL=${DEEPSEEK_API_BASE_URL:-https://api.deepseek.com}
      - DEEPSEEK_MODEL=${DEEPSEEK_MODEL:-deepseek-chat}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-deepseek-coder:6.7b}
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASS=${SMTP_PASS:-}
      - SMTP_FROM=${SMTP_FROM:-noreply@monitor.com}
      - UPLOAD_MAX_SIZE=${UPLOAD_MAX_SIZE:-100mb}
      - STORAGE_PATH=/app/storage
      - SOURCE_MAP_PATH=/app/storage/sourcemaps
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_PATH=/app/logs
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3001}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
      - ENABLE_HEALTH_CHECK=${ENABLE_HEALTH_CHECK:-true}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30000}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_PORT=${METRICS_PORT:-9090}
    volumes:
      - ./server:/app
      - /app/node_modules
      - ./logs:/app/logs
      - ./server/storage:/app/storage
    depends_on:
      mysql:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - monitor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # 监控系统Admin（管理后台）
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: monitor-admin
    restart: unless-stopped
    ports:
      - "${ADMIN_PORT:-3001}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - TZ=${TZ:-Asia/Shanghai}
    volumes:
      - ./admin:/app
      - /app/node_modules
    depends_on:
      server:
        condition: service_healthy
    networks:
      - monitor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Prometheus监控（可选）
  prometheus:
    image: prom/prometheus:latest
    container_name: monitor-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - monitor-network
    profiles:
      - monitoring

  # Grafana可视化（可选）
  grafana:
    image: grafana/grafana:latest
    container_name: monitor-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitor-network
    profiles:
      - monitoring

volumes:
  mysql_data:
    driver: local
  clickhouse_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  monitor-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
