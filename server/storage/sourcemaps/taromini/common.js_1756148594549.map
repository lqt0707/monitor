{"version":3,"file":"common.js","mappingssources":["webpack://taromini/.._.._sdk_taro-core_dist_index.esm.js"],"sourcesContent":["/**\n * 监控SDK通用工具函数\n * 提供各平台通用的工具方法\n */\n/**\n * 生成唯一ID\n * @returns 唯一ID字符串\n */\nfunction generateId() {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n}\n/**\n * 获取当前时间戳\n * @returns 时间戳\n */\nfunction getTimestamp() {\n    return Date.now();\n}\n/**\n * 生成会话ID\n * @returns 会话ID\n */\nfunction generateSessionId() {\n    const timestamp = Date.now().toString(36);\n    const random = Math.random().toString(36).substr(2, 9);\n    return `session_${timestamp}_${random}`;\n}\n/**\n * 序列化错误对象\n * @param error 错误对象\n * @returns 序列化后的错误信息\n */\nfunction serializeError(error) {\n    if (!error)\n        return null;\n    if (error instanceof Error) {\n        return {\n            name: error.name,\n            message: error.message,\n            stack: error.stack,\n            // 保留其他可能的属性\n            ...Object.getOwnPropertyNames(error).reduce((result, key) => {\n                if (![\"name\", \"message\", \"stack\"].includes(key)) {\n                    result[key] = error[key];\n                }\n                return result;\n            }, {}),\n        };\n    }\n    if (typeof error === \"string\") {\n        return { message: error };\n    }\n    try {\n        return JSON.parse(JSON.stringify(error));\n    }\n    catch (_a) {\n        return { message: String(error) };\n    }\n}\n\n/**\n * 核心基础管理器\n * 提供监控SDK的基础功能：配置管理、事件系统、队列管理等\n */\n/**\n * 监控SDK核心管理器\n */\nclass BaseManager {\n    constructor(config, platformAdapter) {\n        this.dataQueue = [];\n        this.isInitialized = false;\n        this.isEnabled = true;\n        this.listeners = new Map();\n        this.config = this.mergeConfig(config);\n        this.platformAdapter = platformAdapter;\n        this.sessionId = generateSessionId();\n    }\n    /**\n     * 合并默认配置和用户配置\n     * @param userConfig 用户配置\n     * @returns 合并后的配置\n     */\n    mergeConfig(userConfig) {\n        const defaultConfig = {\n            enableInDev: false,\n            sampleRate: 1,\n            error: {\n                enabled: true,\n                maxErrors: 100,\n                filters: [],\n                sampleRate: 1,\n            },\n            performance: {\n                enabled: true,\n                maxPerformance: 100,\n                enableResourceTiming: true,\n                enableUserTiming: true,\n            },\n            behavior: {\n                enabled: true,\n                maxBehaviors: 200,\n                autoTrackClick: true,\n                autoTrackPageView: true,\n            },\n            report: {\n                interval: 10000,\n                maxQueueSize: 500,\n                batchSize: 20,\n                timeout: 5000,\n                maxRetries: 3,\n                retryDelay: 2000,\n                enableOfflineCache: true,\n            },\n        };\n        return this.deepMerge(defaultConfig, userConfig);\n    }\n    /**\n     * 深度合并对象\n     * @param target 目标对象\n     * @param source 源对象\n     * @returns 合并后的对象\n     */\n    deepMerge(target, source) {\n        const result = { ...target };\n        for (const key in source) {\n            if (source.hasOwnProperty(key)) {\n                if (typeof source[key] === \"object\" &&\n                    source[key] !== null &&\n                    !Array.isArray(source[key])) {\n                    result[key] = this.deepMerge(target[key] || {}, source[key]);\n                }\n                else {\n                    result[key] = source[key];\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * 初始化监控SDK\n     */\n    async init() {\n        if (this.isInitialized) {\n            console.warn(\"[Monitor] SDK already initialized\");\n            return;\n        }\n        // 检查环境是否应该启用监控\n        if (!this.shouldEnable()) {\n            this.isEnabled = false;\n            return;\n        }\n        try {\n            // 初始化平台适配器\n            await this.platformAdapter.init(this.config);\n            // 初始化各个监控模块\n            this.initErrorMonitor();\n            this.initPerformanceMonitor();\n            this.initBehaviorMonitor();\n            // 启动定时上报\n            this.startReportTimer();\n            this.isInitialized = true;\n            this.emit(\"init\", this.getStatus());\n            console.log(\"[Monitor] SDK initialized successfully\");\n        }\n        catch (error) {\n            console.error(\"[Monitor] Failed to initialize SDK:\", error);\n            this.emit(\"error\", error);\n            throw error;\n        }\n    }\n    /**\n     * 检查是否应该启用监控\n     * @returns 是否启用\n     */\n    shouldEnable() {\n        // 开发环境检查\n        if (this.isDevelopment() && !this.config.enableInDev) {\n            return false;\n        }\n        // 采样率检查\n        if (Math.random() > (this.config.sampleRate || 1)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * 检查是否为开发环境\n     * @returns 是否为开发环境\n     */\n    isDevelopment() {\n        // 根据不同平台判断开发环境\n        if (typeof process !== \"undefined\" && process.env) {\n            return \"development\" === \"development\";\n        }\n        if (typeof globalThis !== \"undefined\" &&\n            typeof globalThis.location !== \"undefined\") {\n            return (globalThis.location.hostname === \"localhost\" ||\n                globalThis.location.hostname === \"127.0.0.1\");\n        }\n        return false;\n    }\n    /**\n     * 初始化错误监控\n     */\n    initErrorMonitor() {\n        var _a;\n        if (!((_a = this.config.error) === null || _a === void 0 ? void 0 : _a.enabled))\n            return;\n        this.platformAdapter.errorCapture.initErrorListeners((errorData) => {\n            this.addToQueue(errorData);\n            this.emit(\"error\", errorData);\n        });\n    }\n    /**\n     * 初始化性能监控\n     */\n    initPerformanceMonitor() {\n        var _a;\n        if (!((_a = this.config.performance) === null || _a === void 0 ? void 0 : _a.enabled))\n            return;\n        this.platformAdapter.performance.initPerformanceMonitor((performanceData) => {\n            this.addToQueue(performanceData);\n            this.emit(\"performance\", performanceData);\n        });\n    }\n    /**\n     * 初始化行为监控\n     */\n    initBehaviorMonitor() {\n        var _a;\n        if (!((_a = this.config.behavior) === null || _a === void 0 ? void 0 : _a.enabled))\n            return;\n        this.platformAdapter.behavior.initBehaviorMonitor((behaviorData) => {\n            this.addToQueue(behaviorData);\n            this.emit(\"behavior\", behaviorData);\n        });\n    }\n    /**\n     * 添加数据到队列\n     * @param data 监控数据\n     */\n    addToQueue(data) {\n        var _a;\n        if (!this.isEnabled)\n            return;\n        // 填充基础信息\n        data.projectId = this.config.projectId;\n        data.userId = this.config.userId;\n        data.sessionId = this.sessionId;\n        data.platform = this.platformAdapter.platformInfo.platform;\n        // 添加项目版本信息\n        if (this.config.projectVersion) {\n            data.projectVersion = this.config.projectVersion;\n        }\n        if (this.config.tags) {\n            data.tags = { ...data.tags, ...this.config.tags };\n        }\n        // 检查队列大小限制\n        const maxQueueSize = ((_a = this.config.report) === null || _a === void 0 ? void 0 : _a.maxQueueSize) || 500;\n        if (this.dataQueue.length >= maxQueueSize) {\n            // 移除最旧的数据\n            this.dataQueue.shift();\n        }\n        this.dataQueue.push(data);\n        this.emit(\"dataAdded\", data);\n    }\n    /**\n     * 启动定时上报\n     */\n    startReportTimer() {\n        var _a;\n        const interval = ((_a = this.config.report) === null || _a === void 0 ? void 0 : _a.interval) || 10000;\n        this.reportTimer = setInterval(() => {\n            this.flush();\n        }, interval);\n    }\n    /**\n     * 立即上报所有数据\n     * @returns Promise\n     */\n    async flush() {\n        var _a;\n        if (!this.isEnabled || this.dataQueue.length === 0) {\n            return;\n        }\n        const batchSize = ((_a = this.config.report) === null || _a === void 0 ? void 0 : _a.batchSize) || 20;\n        const dataToSend = this.dataQueue.splice(0, batchSize);\n        try {\n            await this.sendData(dataToSend);\n            this.emit(\"dataReported\", dataToSend);\n        }\n        catch (error) {\n            // 发送失败，将数据重新放回队列\n            this.dataQueue.unshift(...dataToSend);\n            this.emit(\"reportError\", error);\n            throw error;\n        }\n    }\n    /**\n     * 发送数据到服务器\n     * @param data 要发送的数据\n     */\n    async sendData(data) {\n        var _a, _b;\n        const url = `${this.config.serverUrl}/api/monitor/report`;\n        const options = {\n            timeout: ((_a = this.config.report) === null || _a === void 0 ? void 0 : _a.timeout) || 5000,\n            retries: ((_b = this.config.report) === null || _b === void 0 ? void 0 : _b.maxRetries) || 3,\n            headers: this.config.apiKey\n                ? { \"X-API-Key\": this.config.apiKey }\n                : undefined,\n        };\n        await this.platformAdapter.network.sendData(url, data, options);\n    }\n    /**\n     * 手动捕获错误\n     * @param error 错误对象或消息\n     * @param extra 额外信息\n     */\n    captureError(error, extra) {\n        var _a;\n        if (!((_a = this.config.error) === null || _a === void 0 ? void 0 : _a.enabled))\n            return;\n        const errorData = this.platformAdapter.errorCapture.captureError(error, extra);\n        this.addToQueue(errorData);\n    }\n    /**\n     * 手动记录性能指标\n     * @param name 指标名称\n     * @param metrics 指标数据\n     */\n    recordPerformance(name, metrics) {\n        var _a;\n        if (!((_a = this.config.performance) === null || _a === void 0 ? void 0 : _a.enabled))\n            return;\n        const performanceData = this.platformAdapter.performance.recordPerformance(name, metrics);\n        this.addToQueue(performanceData);\n    }\n    /**\n     * 手动记录用户行为\n     * @param event 事件名称\n     * @param data 事件数据\n     */\n    recordBehavior(event, data) {\n        var _a;\n        if (!((_a = this.config.behavior) === null || _a === void 0 ? void 0 : _a.enabled))\n            return;\n        const behaviorData = this.platformAdapter.behavior.recordBehavior(event, data);\n        this.addToQueue(behaviorData);\n    }\n    /**\n     * 获取SDK状态\n     * @returns SDK状态\n     */\n    getStatus() {\n        var _a, _b, _c, _d, _e;\n        const errorCount = this.dataQueue.filter((item) => \"type\" in item && item.type).length;\n        const performanceCount = this.dataQueue.filter((item) => \"metrics\" in item).length;\n        const behaviorCount = this.dataQueue.filter((item) => \"event\" in item).length;\n        return {\n            initialized: this.isInitialized,\n            enabled: this.isEnabled,\n            queue: {\n                size: this.dataQueue.length,\n                maxSize: ((_a = this.config.report) === null || _a === void 0 ? void 0 : _a.maxQueueSize) || 500,\n                isFull: this.dataQueue.length >= (((_b = this.config.report) === null || _b === void 0 ? void 0 : _b.maxQueueSize) || 500),\n                errorCount,\n                performanceCount,\n                behaviorCount,\n            },\n            lastReportTime: Date.now(),\n            errorMonitor: !!((_c = this.config.error) === null || _c === void 0 ? void 0 : _c.enabled),\n            performanceMonitor: !!((_d = this.config.performance) === null || _d === void 0 ? void 0 : _d.enabled),\n            behaviorMonitor: !!((_e = this.config.behavior) === null || _e === void 0 ? void 0 : _e.enabled),\n        };\n    }\n    /**\n     * 销毁SDK\n     */\n    destroy() {\n        if (!this.isInitialized)\n            return;\n        // 清理定时器\n        if (this.reportTimer) {\n            clearInterval(this.reportTimer);\n            this.reportTimer = undefined;\n        }\n        // 最后一次上报\n        this.flush().catch((error) => {\n            console.warn(\"[Monitor] Failed to flush data on destroy:\", error);\n        });\n        // 销毁平台适配器\n        this.platformAdapter.destroy();\n        // 清理状态\n        this.dataQueue = [];\n        this.listeners.clear();\n        this.isInitialized = false;\n        this.isEnabled = false;\n        this.emit(\"destroy\");\n        console.log(\"[Monitor] SDK destroyed\");\n    }\n    // EventEmitter 实现\n    on(event, listener) {\n        if (!this.listeners.has(event)) {\n            this.listeners.set(event, []);\n        }\n        this.listeners.get(event).push(listener);\n    }\n    off(event, listener) {\n        if (!this.listeners.has(event))\n            return;\n        if (listener) {\n            const listeners = this.listeners.get(event);\n            const index = listeners.indexOf(listener);\n            if (index > -1) {\n                listeners.splice(index, 1);\n            }\n        }\n        else {\n            this.listeners.delete(event);\n        }\n    }\n    emit(event, ...args) {\n        if (!this.listeners.has(event))\n            return false;\n        const listeners = this.listeners.get(event);\n        listeners.forEach((listener) => {\n            try {\n                listener(...args);\n            }\n            catch (error) {\n                console.error(`[Monitor] Error in event listener for '${event}':`, error);\n            }\n        });\n        return true;\n    }\n    once(event, listener) {\n        const onceListener = (...args) => {\n            this.off(event, onceListener);\n            listener(...args);\n        };\n        this.on(event, onceListener);\n    }\n}\n\n/**\n * 监控SDK核心类型定义\n * 统一各平台的数据类型，确保数据结构一致性\n */\n/**\n * 错误类型枚举\n */\nvar ErrorType;\n(function (ErrorType) {\n    /** JavaScript运行时错误 */\n    ErrorType[\"JS_ERROR\"] = \"js_error\";\n    /** Promise未捕获错误 */\n    ErrorType[\"PROMISE_ERROR\"] = \"promise_error\";\n    /** 资源加载错误 */\n    ErrorType[\"RESOURCE_ERROR\"] = \"resource_error\";\n    /** 网络请求错误 */\n    ErrorType[\"HTTP_ERROR\"] = \"http_error\";\n    /** 自定义错误 */\n    ErrorType[\"CUSTOM_ERROR\"] = \"custom_error\";\n    /** 框架错误 */\n    ErrorType[\"FRAMEWORK_ERROR\"] = \"framework_error\";\n})(ErrorType || (ErrorType = {}));\n/**\n * 性能指标类型\n */\nvar PerformanceType;\n(function (PerformanceType) {\n    /** 页面加载性能 */\n    PerformanceType[\"PAGE_LOAD\"] = \"page_load\";\n    /** 网络请求性能 */\n    PerformanceType[\"HTTP_REQUEST\"] = \"http_request\";\n    /** 资源加载性能 */\n    PerformanceType[\"RESOURCE_LOAD\"] = \"resource_load\";\n    /** 用户交互性能 */\n    PerformanceType[\"USER_INTERACTION\"] = \"user_interaction\";\n    /** 自定义性能指标 */\n    PerformanceType[\"CUSTOM_METRIC\"] = \"custom_metric\";\n})(PerformanceType || (PerformanceType = {}));\n/**\n * 用户行为类型\n */\nvar BehaviorType;\n(function (BehaviorType) {\n    /** 页面访问 */\n    BehaviorType[\"PAGE_VIEW\"] = \"page_view\";\n    /** 点击事件 */\n    BehaviorType[\"CLICK\"] = \"click\";\n    /** 滚动事件 */\n    BehaviorType[\"SCROLL\"] = \"scroll\";\n    /** 表单提交 */\n    BehaviorType[\"FORM_SUBMIT\"] = \"form_submit\";\n    /** 路由变化 */\n    BehaviorType[\"ROUTE_CHANGE\"] = \"route_change\";\n    /** 自定义事件 */\n    BehaviorType[\"CUSTOM\"] = \"custom\";\n})(BehaviorType || (BehaviorType = {}));\n\n/**\n * Taro平台适配器实现\n * 实现Taro环境下的监控功能适配，兼容Taro框架和原生微信小程序\n */\n// 兼容性检测\nconst isTaroEnv = typeof Taro !== \"undefined\";\nconst isWxEnv = typeof wx !== \"undefined\";\n/**\n * Taro错误捕获适配器\n */\nclass TaroErrorCapture {\n    /**\n     * 设置配置\n     * @param config 配置对象\n     */\n    setConfig(config) {\n        this.config = config;\n    }\n    /**\n     * 获取项目ID\n     * @returns 项目ID\n     */\n    getProjectId() {\n        var _a;\n        return ((_a = this.config) === null || _a === void 0 ? void 0 : _a.projectId) || \"default-project\";\n    }\n    initErrorListeners(onError) {\n        this.onError = onError;\n        this.setupGlobalErrorHandler();\n        this.setupUnhandledRejectionHandler();\n        this.setupConsoleErrorHandler();\n    }\n    /**\n     * 设置全局错误处理器\n     */\n    setupGlobalErrorHandler() {\n        if (isTaroEnv && Taro.onError) {\n            Taro.onError((error) => {\n                this.handleError(ErrorType.JS_ERROR, error, { source: \"Taro.onError\" });\n            });\n        }\n        else if (isWxEnv && wx.onError) {\n            wx.onError((error) => {\n                this.handleError(ErrorType.JS_ERROR, error, { source: \"wx.onError\" });\n            });\n        }\n    }\n    /**\n     * 设置未处理的Promise错误处理器\n     */\n    setupUnhandledRejectionHandler() {\n        if (isTaroEnv && Taro.onUnhandledRejection) {\n            Taro.onUnhandledRejection((res) => {\n                this.handleError(ErrorType.PROMISE_ERROR, res.reason, {\n                    source: \"Taro.onUnhandledRejection\",\n                });\n            });\n        }\n        else if (isWxEnv && wx.onUnhandledRejection) {\n            wx.onUnhandledRejection((res) => {\n                this.handleError(ErrorType.PROMISE_ERROR, res.reason, {\n                    source: \"wx.onUnhandledRejection\",\n                });\n            });\n        }\n    }\n    /**\n     * 设置Console错误监控\n     */\n    setupConsoleErrorHandler() {\n        const self = this;\n        this.originalConsole = { ...console };\n        console.error = function (...args) {\n            self.handleError(ErrorType.JS_ERROR, args.join(\" \"), {\n                source: \"console.error\",\n                args: args,\n            });\n            return self.originalConsole.error.apply(console, args);\n        };\n    }\n    /**\n     * 处理错误\n     * @param type 错误类型\n     * @param error 错误信息\n     * @param extra 额外信息\n     */\n    handleError(type, error, extra = {}) {\n        var _a;\n        if (!this.onError)\n            return;\n        const errorData = {\n            id: generateId(),\n            timestamp: getTimestamp(),\n            projectId: this.getProjectId(), // 使用方法获取projectId\n            projectVersion: (_a = this.config) === null || _a === void 0 ? void 0 : _a.projectVersion, // 添加项目版本信息\n            sessionId: generateSessionId(),\n            url: this.getCurrentPagePath(),\n            userAgent: this.getUserAgent(),\n            platform: \"taro-mini\",\n            type,\n            message: typeof error === \"string\" ? error : (error === null || error === void 0 ? void 0 : error.message) || String(error),\n            stack: error === null || error === void 0 ? void 0 : error.stack,\n            error: serializeError(error),\n            ...extra,\n        };\n        console.log(\"🚨 错误被捕获:\", {\n            type: errorData.type,\n            message: errorData.message,\n            projectId: errorData.projectId,\n            url: errorData.url,\n        });\n        this.onError(errorData);\n    }\n    /**\n     * 获取当前页面路径\n     */\n    getCurrentPagePath() {\n        try {\n            if (typeof getCurrentPages === \"function\") {\n                const pages = getCurrentPages();\n                const currentPage = pages[pages.length - 1];\n                return (currentPage === null || currentPage === void 0 ? void 0 : currentPage.route) || (currentPage === null || currentPage === void 0 ? void 0 : currentPage.__route__) || \"\";\n            }\n        }\n        catch (e) {\n            // 忽略错误\n        }\n        return \"\";\n    }\n    /**\n     * 获取用户代理信息\n     * 使用新的微信小程序API替代废弃的getSystemInfoSync\n     */\n    getUserAgent() {\n        try {\n            if (isTaroEnv) {\n                // 优先使用Taro的新API\n                if (Taro.getDeviceInfo && Taro.getSystemSetting) {\n                    const deviceInfo = Taro.getDeviceInfo();\n                    const systemInfo = Taro.getSystemSetting();\n                    return `${deviceInfo.brand || \"Unknown\"} ${deviceInfo.model || \"\"} ${deviceInfo.system || \"\"}`;\n                }\n                // 降级使用旧API（如果新API不可用）\n                else if (Taro.getSystemInfoSync) {\n                    const systemInfo = Taro.getSystemInfoSync();\n                    return `${systemInfo.brand} ${systemInfo.model} ${systemInfo.system}`;\n                }\n            }\n            else if (isWxEnv) {\n                // 优先使用微信小程序的新API\n                if (wx.getDeviceInfo && wx.getSystemSetting) {\n                    const deviceInfo = wx.getDeviceInfo();\n                    const systemInfo = wx.getSystemSetting();\n                    return `${deviceInfo.brand || \"Unknown\"} ${deviceInfo.model || \"\"} ${deviceInfo.system || \"\"}`;\n                }\n                // 降级使用旧API（如果新API不可用）\n                else if (wx.getSystemInfoSync) {\n                    const systemInfo = wx.getSystemInfoSync();\n                    return `${systemInfo.brand} ${systemInfo.model} ${systemInfo.system}`;\n                }\n            }\n        }\n        catch (e) {\n            // 如果所有API都失败，记录错误但不影响主流程\n            console.warn(\"[TaroMonitorSDK] Failed to get system info:\", e);\n        }\n        return \"Taro-MiniProgram\";\n    }\n    destroyErrorListeners() {\n        if (this.originalConsole) {\n            Object.assign(console, this.originalConsole);\n        }\n    }\n    captureError(error, extra) {\n        var _a;\n        const errorData = {\n            id: generateId(),\n            timestamp: getTimestamp(),\n            projectId: this.getProjectId(), // 使用正确的projectId\n            projectVersion: (_a = this.config) === null || _a === void 0 ? void 0 : _a.projectVersion, // 添加项目版本信息\n            sessionId: generateSessionId(),\n            url: this.getCurrentPagePath(),\n            userAgent: this.getUserAgent(),\n            platform: \"taro-mini\",\n            type: ErrorType.CUSTOM_ERROR,\n            message: error instanceof Error ? error.message : String(error),\n            stack: error instanceof Error ? error.stack : undefined,\n            error: serializeError(error),\n            ...extra,\n        };\n        return errorData;\n    }\n    captureHttpError(request) {\n        return {\n            id: generateId(),\n            timestamp: getTimestamp(),\n            projectId: \"\",\n            sessionId: generateSessionId(),\n            url: this.getCurrentPagePath(),\n            userAgent: this.getUserAgent(),\n            platform: \"taro-mini\",\n            type: ErrorType.HTTP_ERROR,\n            message: `HTTP ${request.status}: ${request.method} ${request.url}`,\n            error: {\n                url: request.url,\n                method: request.method,\n                status: request.status,\n                statusText: request.statusText,\n                duration: request.duration,\n            },\n        };\n    }\n}\n/**\n * Taro性能监控适配器\n */\nclass TaroPerformanceAdapter {\n    initPerformanceMonitor(onPerformance) {\n        this.onPerformance = onPerformance;\n        this.setupRequestPerformanceMonitor();\n    }\n    /**\n     * 获取原始的request方法（供SDK内部使用，避免被监控）\n     */\n    static getOriginalRequest() {\n        return TaroPerformanceAdapter.originalRequest;\n    }\n    /**\n     * 设置请求性能监控\n     */\n    setupRequestPerformanceMonitor() {\n        const self = this;\n        if (isTaroEnv && Taro.request) {\n            // 保存原始request方法（只保存一次）\n            if (!TaroPerformanceAdapter.originalRequest) {\n                TaroPerformanceAdapter.originalRequest = Taro.request;\n            }\n            const originalRequest = TaroPerformanceAdapter.originalRequest;\n            Taro.request = function (options) {\n                const startTime = Date.now();\n                const originalSuccess = options.success;\n                const originalFail = options.fail;\n                options.success = function (res) {\n                    const duration = Date.now() - startTime;\n                    self.recordRequestPerformance(options.url, options.method || \"GET\", res.statusCode, duration, true);\n                    if (originalSuccess)\n                        originalSuccess(res);\n                };\n                options.fail = function (err) {\n                    const duration = Date.now() - startTime;\n                    self.recordRequestPerformance(options.url, options.method || \"GET\", 0, duration, false);\n                    if (originalFail)\n                        originalFail(err);\n                };\n                return originalRequest(options);\n            };\n        }\n        else if (isWxEnv && wx.request) {\n            // 保存原始request方法（只保存一次）\n            if (!TaroPerformanceAdapter.originalRequest) {\n                TaroPerformanceAdapter.originalRequest = wx.request;\n            }\n            const originalRequest = TaroPerformanceAdapter.originalRequest;\n            wx.request = function (options) {\n                const startTime = Date.now();\n                const originalSuccess = options.success;\n                const originalFail = options.fail;\n                options.success = function (res) {\n                    const duration = Date.now() - startTime;\n                    self.recordRequestPerformance(options.url, options.method || \"GET\", res.statusCode, duration, true);\n                    if (originalSuccess)\n                        originalSuccess(res);\n                };\n                options.fail = function (err) {\n                    const duration = Date.now() - startTime;\n                    self.recordRequestPerformance(options.url, options.method || \"GET\", 0, duration, false);\n                    if (originalFail)\n                        originalFail(err);\n                };\n                return originalRequest(options);\n            };\n        }\n    }\n    /**\n     * 记录请求性能\n     */\n    recordRequestPerformance(url, method, status, duration, success) {\n        if (!this.onPerformance)\n            return;\n        // 过滤SDK监控接口的请求\n        const monitorEndpoints = [\n            \"/api/monitor/report\",\n            \"/api/monitor/data\",\n            \"/api/monitor/stats\",\n            \"/api/error-logs\",\n            \"/api/health\",\n        ];\n        const isMonitorEndpoint = monitorEndpoints.some((endpoint) => url.includes(endpoint));\n        if (isMonitorEndpoint) {\n            console.log(\"🚫 过滤SDK监控接口性能数据:\", url);\n            return; // 不记录SDK相关的网络请求性能\n        }\n        // 新增：检查当前页面堆栈，如果来自SDK内部调用则过滤\n        try {\n            const stack = new Error().stack || \"\";\n            const isSDKInternalCall = stack.includes(\"sendSingleData\") ||\n                stack.includes(\"TaroNetworkAdapter\") ||\n                stack.includes(\"sendData\");\n            if (isSDKInternalCall) {\n                console.log(\"🚫 过滤SDK内部调用的网络请求:\", url);\n                return;\n            }\n        }\n        catch (e) {\n            // 忽略堆栈检查错误\n        }\n        const performanceData = {\n            id: generateId(),\n            timestamp: getTimestamp(),\n            projectId: \"\",\n            sessionId: generateSessionId(),\n            url: this.getCurrentPagePath(),\n            userAgent: this.getUserAgent(),\n            platform: \"taro-mini\",\n            type: PerformanceType.HTTP_REQUEST,\n            metrics: {\n                duration,\n                status,\n                success: success ? 1 : 0,\n            },\n            resource: {\n                name: url,\n                size: 0,\n                duration,\n                type: \"request\",\n            },\n        };\n        this.onPerformance(performanceData);\n    }\n    getCurrentPagePath() {\n        try {\n            if (typeof getCurrentPages === \"function\") {\n                const pages = getCurrentPages();\n                const currentPage = pages[pages.length - 1];\n                return (currentPage === null || currentPage === void 0 ? void 0 : currentPage.route) || (currentPage === null || currentPage === void 0 ? void 0 : currentPage.__route__) || \"\";\n            }\n        }\n        catch (e) {\n            // 忽略错误\n        }\n        return \"\";\n    }\n    getUserAgent() {\n        try {\n            if (isTaroEnv && Taro.getSystemInfoSync) {\n                const systemInfo = Taro.getSystemInfoSync();\n                return `${systemInfo.brand} ${systemInfo.model} ${systemInfo.system}`;\n            }\n            else if (isWxEnv && wx.getSystemInfoSync) {\n                const systemInfo = wx.getSystemInfoSync();\n                return `${systemInfo.brand} ${systemInfo.model} ${systemInfo.system}`;\n            }\n        }\n        catch (e) {\n            // 忽略错误\n        }\n        return \"Taro-MiniProgram\";\n    }\n    destroyPerformanceMonitor() {\n        // 清理性能监控\n    }\n    recordPerformance(name, metrics) {\n        return {\n            id: generateId(),\n            timestamp: getTimestamp(),\n            projectId: \"\",\n            sessionId: generateSessionId(),\n            url: this.getCurrentPagePath(),\n            userAgent: this.getUserAgent(),\n            platform: \"taro-mini\",\n            type: PerformanceType.CUSTOM_METRIC,\n            metrics,\n        };\n    }\n    getPagePerformance() {\n        return {};\n    }\n}\nTaroPerformanceAdapter.originalRequest = null; // 保存原始的request方法\n/**\n * Taro行为监控适配器\n */\nclass TaroBehaviorAdapter {\n    initBehaviorMonitor(onBehavior) {\n        this.onBehavior = onBehavior;\n    }\n    destroyBehaviorMonitor() {\n        // 清理行为监控\n    }\n    recordBehavior(event, data) {\n        return {\n            id: generateId(),\n            timestamp: getTimestamp(),\n            projectId: \"\",\n            sessionId: generateSessionId(),\n            url: this.getCurrentPagePath(),\n            userAgent: this.getUserAgent(),\n            platform: \"taro-mini\",\n            type: BehaviorType.CUSTOM,\n            event,\n            data,\n        };\n    }\n    getCurrentPagePath() {\n        try {\n            if (typeof getCurrentPages === \"function\") {\n                const pages = getCurrentPages();\n                const currentPage = pages[pages.length - 1];\n                return (currentPage === null || currentPage === void 0 ? void 0 : currentPage.route) || (currentPage === null || currentPage === void 0 ? void 0 : currentPage.__route__) || \"\";\n            }\n        }\n        catch (e) {\n            // 忽略错误\n        }\n        return \"\";\n    }\n    getUserAgent() {\n        try {\n            if (isTaroEnv && Taro.getSystemInfoSync) {\n                const systemInfo = Taro.getSystemInfoSync();\n                return `${systemInfo.brand} ${systemInfo.model} ${systemInfo.system}`;\n            }\n            else if (isWxEnv && wx.getSystemInfoSync) {\n                const systemInfo = wx.getSystemInfoSync();\n                return `${systemInfo.brand} ${systemInfo.model} ${systemInfo.system}`;\n            }\n        }\n        catch (e) {\n            // 忽略错误\n        }\n        return \"Taro-MiniProgram\";\n    }\n}\n/**\n * Taro网络适配器\n */\nclass TaroNetworkAdapter {\n    interceptNetwork(onRequest, onResponse, onError) {\n        // 网络拦截实现\n    }\n    async sendData(url, data, options) {\n        // 如果是数组，需要逐个发送（因为后端接口只支持单条数据）\n        if (Array.isArray(data)) {\n            const results = [];\n            for (const item of data) {\n                // 过滤SDK相关数据\n                if (this.shouldFilterSDKRelatedData(item)) {\n                    console.log(\"🚫 过滤了SDK相关数据，不进行上报\");\n                    continue; // 跳过该数据，不上报\n                }\n                try {\n                    const transformedData = this.transformDataToReportDto(item);\n                    const result = await this.sendSingleData(url, transformedData, options);\n                    results.push(result);\n                    console.log(\"✅ 数据上报成功:\", transformedData.type, transformedData.errorMessage || transformedData.type);\n                }\n                catch (error) {\n                    console.error(\"❌ 数据上报失败:\", error);\n                    throw error;\n                }\n            }\n            return results;\n        }\n        else {\n            // 单条数据\n            // 过滤SDK相关数据\n            if (this.shouldFilterSDKRelatedData(data)) {\n                console.log(\"🚫 过滤了SDK相关数据，不进行上报\");\n                return { filtered: true, reason: \"SDK related data\" };\n            }\n            const transformedData = this.transformDataToReportDto(data);\n            return this.sendSingleData(url, transformedData, options);\n        }\n    }\n    /**\n     * 检查是否为SDK相关的请求或错误，需要过滤掉\n     * @param data 监控数据\n     * @returns 是否应该过滤（true表示过滤掉，不上报）\n     */\n    shouldFilterSDKRelatedData(data) {\n        var _a, _b;\n        // 过滤监控接口相关的请求\n        const monitorEndpoints = [\n            \"/api/monitor/report\",\n            \"/api/monitor/data\",\n            \"/api/monitor/stats\",\n            \"/api/error-logs\",\n            \"/api/health\",\n        ];\n        // 检查网络请求性能数据\n        if (data.type === \"http_request\" || data.type === \"slowHttpRequest\") {\n            if ((_a = data.error) === null || _a === void 0 ? void 0 : _a.url) {\n                const isMonitorEndpoint = monitorEndpoints.some((endpoint) => data.error.url.includes(endpoint));\n                if (isMonitorEndpoint) {\n                    console.log(\"🚫 过滤SDK监控接口请求:\", data.error.url);\n                    return true;\n                }\n            }\n            // 检查extraData中的resource.name\n            if (data.extraData) {\n                try {\n                    const extraData = typeof data.extraData === \"string\"\n                        ? JSON.parse(data.extraData)\n                        : data.extraData;\n                    if ((_b = extraData.resource) === null || _b === void 0 ? void 0 : _b.name) {\n                        const isMonitorEndpoint = monitorEndpoints.some((endpoint) => extraData.resource.name.includes(endpoint));\n                        if (isMonitorEndpoint) {\n                            console.log(\"🚫 过滤SDK监控接口请求:\", extraData.resource.name);\n                            return true;\n                        }\n                    }\n                }\n                catch (e) {\n                    // 忽略JSON解析错误\n                }\n            }\n        }\n        // 过滤SDK内部错误\n        if (data.message || data.errorMessage) {\n            const errorMessage = data.message || data.errorMessage;\n            const sdkErrorPatterns = [\n                \"MonitorSDK\",\n                \"TaroMonitorSDK\",\n                \"PlatformAdapter\",\n                \"BaseManager\",\n                \"sendData\",\n                \"transformDataToReportDto\",\n                \"monitor/report\",\n                \"monitor initialization\",\n                \"SDK not initialized\",\n            ];\n            const isSDKError = sdkErrorPatterns.some((pattern) => errorMessage.toLowerCase().includes(pattern.toLowerCase()));\n            if (isSDKError) {\n                console.log(\"🚫 过滤SDK内部错误:\", errorMessage);\n                return true;\n            }\n        }\n        // 过滤SDK堆栈跟踪\n        if (data.stack || data.errorStack) {\n            const stack = data.stack || data.errorStack;\n            const sdkStackPatterns = [\n                \"TaroPlatformAdapter\",\n                \"BaseManager\",\n                \"sendData\",\n                \"transformDataToReportDto\",\n                \"TaroMonitorSDK\",\n            ];\n            const isSDKStack = sdkStackPatterns.some((pattern) => stack.includes(pattern));\n            if (isSDKStack) {\n                console.log(\"🚫 过滤SDK内部堆栈错误\");\n                return true;\n            }\n        }\n        return false;\n    }\n    transformDataToReportDto(data) {\n        console.log(\"🔄 开始数据转换，原始数据:\", data);\n        // 基础字段映射\n        const reportData = {\n            projectId: data.projectId || \"default-project\",\n            type: this.mapErrorTypeToReportType(data.type),\n            pageUrl: data.url || data.pageUrl,\n            userAgent: data.userAgent,\n        };\n        // 添加项目版本信息（重要：作为顶级字段）\n        if (data.projectVersion) {\n            reportData.projectVersion = data.projectVersion;\n        }\n        // 根据数据类型添加特定字段\n        if (data.message) {\n            reportData.errorMessage = data.message;\n        }\n        if (data.stack) {\n            reportData.errorStack = data.stack;\n        }\n        if (data.sessionId) {\n            reportData.userId = data.sessionId; // 使用sessionId作为userId\n        }\n        // 性能数据处理\n        if (data.metrics) {\n            reportData.performanceData = JSON.stringify(data.metrics);\n        }\n        // HTTP错误数据处理\n        if (data.error && typeof data.error === \"object\") {\n            if (data.error.url)\n                reportData.requestUrl = data.error.url;\n            if (data.error.method)\n                reportData.requestMethod = data.error.method;\n            if (data.error.status)\n                reportData.responseStatus = data.error.status;\n            if (data.error.duration)\n                reportData.duration = data.error.duration;\n        }\n        // 处理额外数据 - 将所有未映射的字段合并到extraData中\n        const extraFields = {};\n        // 收集所有额外字段\n        Object.keys(data).forEach((key) => {\n            if (![\n                \"id\",\n                \"timestamp\",\n                \"projectId\",\n                \"projectVersion\", // 添加projectVersion到排除列表\n                \"sessionId\",\n                \"url\",\n                \"pageUrl\",\n                \"userAgent\",\n                \"platform\",\n                \"type\",\n                \"message\",\n                \"stack\",\n                \"error\",\n                \"metrics\",\n            ].includes(key)) {\n                extraFields[key] = data[key];\n            }\n        });\n        // 如果有额外数据或者原有的extra/data字段，合并处理\n        if (Object.keys(extraFields).length > 0 || data.extra || data.data) {\n            const combinedExtra = {\n                ...extraFields,\n                ...(data.extra || {}),\n                ...(data.data || {}),\n            };\n            reportData.extraData = JSON.stringify(combinedExtra);\n        }\n        console.log(\"✅ 数据转换完成，转换后数据:\", reportData);\n        // 验证必需字段\n        if (!reportData.projectId || !reportData.type) {\n            console.error(\"❌ 数据转换后缺少必需字段:\", {\n                projectId: reportData.projectId,\n                type: reportData.type,\n            });\n        }\n        return reportData;\n    }\n    /**\n     * 将SDK错误类型映射为后端期望的类型\n     * @param sdkType SDK错误类型\n     * @returns 后端类型\n     */\n    mapErrorTypeToReportType(sdkType) {\n        console.log(\"🔄 映射错误类型:\", sdkType);\n        const typeMap = {\n            // SDK内部错误类型 -> 后端期望类型\n            js_error: \"jsError\",\n            promise_error: \"unHandleRejection\",\n            http_error: \"reqError\",\n            custom_error: \"jsError\",\n            custom_metric: \"performanceInfoReady\",\n            http_request: \"slowHttpRequest\",\n            // 直接映射后端类型（兼容性）\n            jsError: \"jsError\",\n            unHandleRejection: \"unHandleRejection\",\n            reqError: \"reqError\",\n            performanceInfoReady: \"performanceInfoReady\",\n            slowHttpRequest: \"slowHttpRequest\",\n        };\n        const mappedType = typeMap[sdkType] || \"jsError\";\n        console.log(\"✅ 类型映射结果:\", sdkType, \"->\", mappedType);\n        return mappedType;\n    }\n    /**\n     * 发送单条数据\n     * @param url 请求URL\n     * @param data 数据\n     * @param options 选项\n     * @returns Promise\n     */\n    async sendSingleData(url, data, options) {\n        return new Promise((resolve, reject) => {\n            console.log(\"🚀 发送数据到:\", url);\n            console.log(\"📊 数据内容:\", data);\n            const requestOptions = {\n                url,\n                method: \"POST\",\n                data,\n                header: {\n                    \"Content-Type\": \"application/json\",\n                    ...options === null || options === void 0 ? void 0 : options.headers,\n                },\n                timeout: (options === null || options === void 0 ? void 0 : options.timeout) || 5000,\n                success: (res) => {\n                    console.log(\"✅ 请求成功:\", res.statusCode, res.data);\n                    if (res.statusCode >= 200 && res.statusCode < 300) {\n                        resolve(res.data);\n                    }\n                    else {\n                        console.error(\"❌ HTTP错误:\", res.statusCode, res.data);\n                        reject(new Error(`HTTP ${res.statusCode}: ${res.errMsg || \"Request failed\"}`));\n                    }\n                },\n                fail: (err) => {\n                    console.error(\"❌ 请求失败:\", err);\n                    reject(new Error(err.errMsg || \"Request failed\"));\n                },\n            };\n            // 优先使用原始的未被拦截的request方法，避免SDK监控自己的上报请求\n            const originalRequest = TaroPerformanceAdapter.getOriginalRequest();\n            if (originalRequest) {\n                console.log(\"📡 使用原始request方法发送数据，避免重复监控\");\n                originalRequest(requestOptions);\n            }\n            else if (isTaroEnv && Taro.request) {\n                console.log(\"⚠️ 使用当前Taro.request方法（可能被监控）\");\n                Taro.request(requestOptions);\n            }\n            else if (isWxEnv && wx.request) {\n                console.log(\"⚠️ 使用当前wx.request方法（可能被监控）\");\n                wx.request(requestOptions);\n            }\n            else {\n                reject(new Error(\"Request API not available\"));\n            }\n        });\n    }\n}\n/**\n * Taro存储适配器\n */\nclass TaroStorageAdapter {\n    setItem(key, value) {\n        try {\n            if (isTaroEnv && Taro.setStorageSync) {\n                Taro.setStorageSync(key, value);\n            }\n            else if (isWxEnv && wx.setStorageSync) {\n                wx.setStorageSync(key, value);\n            }\n        }\n        catch (error) {\n            console.warn(\"[TaroStorageAdapter] setItem failed:\", error);\n        }\n    }\n    getItem(key) {\n        try {\n            if (isTaroEnv && Taro.getStorageSync) {\n                return Taro.getStorageSync(key) || null;\n            }\n            else if (isWxEnv && wx.getStorageSync) {\n                return wx.getStorageSync(key) || null;\n            }\n        }\n        catch (error) {\n            console.warn(\"[TaroStorageAdapter] getItem failed:\", error);\n        }\n        return null;\n    }\n    removeItem(key) {\n        try {\n            if (isTaroEnv && Taro.removeStorageSync) {\n                Taro.removeStorageSync(key);\n            }\n            else if (isWxEnv && wx.removeStorageSync) {\n                wx.removeStorageSync(key);\n            }\n        }\n        catch (error) {\n            console.warn(\"[TaroStorageAdapter] removeItem failed:\", error);\n        }\n    }\n    clear() {\n        try {\n            if (isTaroEnv && Taro.clearStorageSync) {\n                Taro.clearStorageSync();\n            }\n            else if (isWxEnv && wx.clearStorageSync) {\n                wx.clearStorageSync();\n            }\n        }\n        catch (error) {\n            console.warn(\"[TaroStorageAdapter] clear failed:\", error);\n        }\n    }\n}\n/**\n * Taro平台适配器\n */\nclass TaroPlatformAdapter {\n    constructor() {\n        this.platformInfo = this.getPlatformInfo();\n        this.errorCapture = new TaroErrorCapture();\n        this.performance = new TaroPerformanceAdapter();\n        this.behavior = new TaroBehaviorAdapter();\n        this.network = new TaroNetworkAdapter();\n        this.storage = new TaroStorageAdapter();\n    }\n    /**\n     * 获取平台信息\n     */\n    getPlatformInfo() {\n        let deviceInfo = {};\n        try {\n            if (isTaroEnv && Taro.getSystemInfoSync) {\n                deviceInfo = Taro.getSystemInfoSync();\n            }\n            else if (isWxEnv && wx.getSystemInfoSync) {\n                deviceInfo = wx.getSystemInfoSync();\n            }\n        }\n        catch (e) {\n            console.warn(\"[TaroPlatformAdapter] Failed to get system info:\", e);\n        }\n        return {\n            platform: \"taro-mini\",\n            version: \"1.0.0\",\n            userAgent: `${deviceInfo.brand || \"Unknown\"} ${deviceInfo.model || \"Unknown\"} ${deviceInfo.system || \"Unknown\"}`,\n            deviceInfo: {\n                brand: deviceInfo.brand,\n                model: deviceInfo.model,\n                system: deviceInfo.system,\n                platform: deviceInfo.platform,\n                version: deviceInfo.version,\n                SDKVersion: deviceInfo.SDKVersion,\n                screenWidth: deviceInfo.screenWidth,\n                screenHeight: deviceInfo.screenHeight,\n                windowWidth: deviceInfo.windowWidth,\n                windowHeight: deviceInfo.windowHeight,\n                pixelRatio: deviceInfo.pixelRatio,\n                language: deviceInfo.language,\n            },\n        };\n    }\n    init(config) {\n        console.log(\"[TaroPlatformAdapter] Initialized with config:\", config);\n        // 将配置传递给错误捕获器\n        if (this.errorCapture && \"setConfig\" in this.errorCapture) {\n            this.errorCapture.setConfig(config);\n        }\n    }\n    destroy() {\n        this.errorCapture.destroyErrorListeners();\n        this.performance.destroyPerformanceMonitor();\n        this.behavior.destroyBehaviorMonitor();\n        console.log(\"[TaroPlatformAdapter] Destroyed\");\n    }\n}\n\n/**\n * Taro监控SDK\n * 基于Core架构的Taro平台SDK实现\n */\n// 导入配置模板\nconst Templates = {\n    TaroBasic: {\n        error: {\n            enabled: true,\n            captureConsole: true,\n            maxErrors: 50,\n        },\n        performance: {\n            enabled: true,\n            capturePageLoad: true,\n            captureNetworkTiming: true,\n        },\n        behavior: {\n            enabled: true,\n            capturePageViews: true,\n            captureTaps: true,\n            captureRouteChange: true,\n        },\n        report: {\n            interval: 15000,\n            batchSize: 10,\n            maxRetries: 2,\n        },\n    },\n};\n/**\n * 创建配置\n * @param template 配置模板\n * @param overrides 自定义覆盖配置\n * @returns 最终配置\n */\nfunction createConfig(template, overrides = {}) {\n    return {\n        ...template,\n        ...overrides,\n        error: { ...template.error, ...overrides.error },\n        performance: { ...template.performance, ...overrides.performance },\n        behavior: { ...template.behavior, ...overrides.behavior },\n        report: { ...template.report, ...overrides.report },\n    };\n}\n/**\n * Taro监控SDK类\n */\nclass TaroMonitorSDK extends BaseManager {\n    constructor(config) {\n        const platformAdapter = new TaroPlatformAdapter();\n        super(config, platformAdapter);\n    }\n    /**\n     * 初始化Taro监控SDK（单例模式）\n     * @param config 配置选项\n     * @returns SDK实例\n     */\n    static init(config) {\n        if (TaroMonitorSDK.instance) {\n            console.warn(\"[TaroMonitorSDK] SDK already initialized, returning existing instance\");\n            return TaroMonitorSDK.instance;\n        }\n        TaroMonitorSDK.instance = new TaroMonitorSDK(config);\n        // 自动初始化\n        TaroMonitorSDK.instance.init().catch((error) => {\n            console.error(\"[TaroMonitorSDK] Failed to initialize:\", error);\n        });\n        return TaroMonitorSDK.instance;\n    }\n    /**\n     * 获取当前SDK实例\n     * @returns SDK实例或null\n     */\n    static getInstance() {\n        return TaroMonitorSDK.instance;\n    }\n    /**\n     * 销毁SDK\n     */\n    static destroy() {\n        if (TaroMonitorSDK.instance) {\n            TaroMonitorSDK.instance.destroy();\n            TaroMonitorSDK.instance = null;\n        }\n    }\n}\nTaroMonitorSDK.instance = null;\n// 便捷的静态方法\nconst TaroMonitorSDKHelper = {\n    /**\n     * 快速开始方法\n     */\n    quickStart: {\n        /**\n         * Taro应用快速开始\n         * @param projectId 项目ID\n         * @param serverUrl 服务器地址\n         * @param options 额外配置\n         * @returns SDK实例\n         */\n        taro: (projectId, serverUrl, options = {}) => {\n            const config = createConfig(Templates.TaroBasic, {\n                projectId,\n                serverUrl,\n                ...options,\n            });\n            return TaroMonitorSDK.init(config);\n        },\n    },\n    /**\n     * 初始化监控SDK\n     * @param config 配置选项\n     * @returns SDK实例\n     */\n    init: (config) => TaroMonitorSDK.init(config),\n    /**\n     * 获取当前实例\n     * @returns SDK实例或null\n     */\n    getInstance: () => TaroMonitorSDK.getInstance(),\n    /**\n     * 手动捕获错误\n     * @param error 错误对象或消息\n     * @param extra 额外信息\n     */\n    captureError: (error, extra) => {\n        const instance = TaroMonitorSDK.getInstance();\n        if (instance) {\n            instance.captureError(error, extra);\n        }\n        else {\n            console.warn(\"[TaroMonitorSDK] SDK not initialized, call init() first\");\n        }\n    },\n    /**\n     * 记录性能指标\n     * @param name 指标名称\n     * @param metrics 指标数据\n     */\n    recordPerformance: (name, metrics) => {\n        const instance = TaroMonitorSDK.getInstance();\n        if (instance) {\n            instance.recordPerformance(name, metrics);\n        }\n        else {\n            console.warn(\"[TaroMonitorSDK] SDK not initialized, call init() first\");\n        }\n    },\n    /**\n     * 记录用户行为\n     * @param event 事件名称\n     * @param data 事件数据\n     */\n    recordBehavior: (event, data) => {\n        const instance = TaroMonitorSDK.getInstance();\n        if (instance) {\n            instance.recordBehavior(event, data);\n        }\n        else {\n            console.warn(\"[TaroMonitorSDK] SDK not initialized, call init() first\");\n        }\n    },\n    /**\n     * 立即上报数据\n     */\n    flush: async () => {\n        const instance = TaroMonitorSDK.getInstance();\n        if (instance) {\n            await instance.flush();\n        }\n        else {\n            console.warn(\"[TaroMonitorSDK] SDK not initialized, call init() first\");\n        }\n    },\n    /**\n     * 获取SDK状态\n     */\n    getStatus: () => {\n        const instance = TaroMonitorSDK.getInstance();\n        if (instance) {\n            return instance.getStatus();\n        }\n        else {\n            console.warn(\"[TaroMonitorSDK] SDK not initialized, call init() first\");\n            return null;\n        }\n    },\n    /**\n     * 销毁SDK\n     */\n    destroy: () => TaroMonitorSDK.destroy(),\n    /**\n     * 监听事件\n     * @param event 事件名称\n     * @param listener 监听器函数\n     */\n    on: (event, listener) => {\n        const instance = TaroMonitorSDK.getInstance();\n        if (instance) {\n            instance.on(event, listener);\n        }\n        else {\n            console.warn(\"[TaroMonitorSDK] SDK not initialized, call init() first\");\n        }\n    },\n    /**\n     * 移除事件监听\n     * @param event 事件名称\n     * @param listener 监听器函数\n     */\n    off: (event, listener) => {\n        const instance = TaroMonitorSDK.getInstance();\n        if (instance) {\n            instance.off(event, listener);\n        }\n        else {\n            console.warn(\"[TaroMonitorSDK] SDK not initialized, call init() first\");\n        }\n    },\n};\n// 兼容原有的初始化方式\nconst initTaroMonitor = TaroMonitorSDKHelper.init;\n\nexport { BehaviorType, ErrorType, PerformanceType, TaroMonitorSDK, Templates, createConfig, TaroMonitorSDKHelper as default, initTaroMonitor };\n//# sourceMappingURL=index.esm.js.map\n"],"names":[],"sourceRoot":""}